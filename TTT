def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    # rows
    for row in board:
        if all([cell == player for cell in row]):
            return True

    # columns
    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    # diagonals
    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True

    return False

def check_tie(board):
    return all([cell != " " for row in board for cell in row])

def get_move(player):
    while True:
        try:
            move = input(f"Player {player}, enter your move (row and column): ")
            row, col = map(int, move.split())
            if row in range(1, 4) and col in range(1, 4):
                return row - 1, col - 1
            else:
                print("Invalid move. Please enter row and column numbers between 1 and 3.")
        except ValueError:
            print("Invalid input. Please enter row and column numbers separated by a space.")

def main():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"

    while True:
        print_board(board)
        row, col = get_move(current_player)

        if board[row][col] == " ":
            board[row][col] = current_player
            if check_winner(board, current_player):
                print_board(board)
                print(f"Player {current_player} wins!")
                break
            elif check_tie(board):
                print_board(board)
                print("It's a tie!")
                break
            current_player = "O" if current_player == "X" else "X"
        else:
            print("Cell is already occupied. Choose another move.")

if __name__ == "__main__":
    main()
